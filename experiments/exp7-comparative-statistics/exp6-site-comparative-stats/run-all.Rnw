\documentclass{article}
\usepackage{fancyhdr}
\usepackage[margin=2.0cm]{geometry}%rounded up from 1.87, just to be safe...
\usepackage{parskip}
\usepackage{float}
%\usepackage{times} %make sure that the times new roman is used
\usepackage{mathptmx}

\usepackage{blindtext}
\title{Site Comparative Analysis}
\date{Febrary 2020}
\author{Hallett group}


%      ------ Format Stuff ---------
\newlength{\itemdist}
\setlength{\itemdist}{0.05ex}
\newlength{\headdist}
\setlength{\headdist}{0.04ex}

\newcommand{\R}{\mathbb{R}}


\begin{document}
\SweaveOpts{concordance=TRUE}
%\SweaveOpts{concordance=TRUE}
%\pagestyle{fancy}

\maketitle

We look at different Statistical Methods, to highlight any key differences within a given microbial community(site) or between microbial communities {\em Site Comparative Analysis}. The Chen et al.Microbiome (2019)7:104 (http://doi.org/10.1186/s40168-019-0714-6) will act a guidance for the application of some methodologies. 


\section{Relative abundance of the most abundant prokaryotic microbes across Maycocks & Bellairs at three main levels}
<<>>= 
library(xtable)
library(ggplot2)
source("../../src/functions.R")
#load tree.latest to keep some functionality (temp)
load("~/repo/reefmicrobiome/data/tree.latest")
# load the uncontaminated tree  computed in exp4 with functions from abundance_comparison.R
Uncontaminated <- read.csv("~/repo/reefmicrobiome/data/Uncontaminated.csv")
Uncontaminated[1:10, 1:7 ]
@

\subsection{Phylum Level}
<<>>= 
#Reduce tree by removing Eurkaryota and Viral organisms so only Prokaryotic organisms remain.
prokarytree <-  reduce_tree(Uncontaminated, 2759) #Eurkayota 
prokarytree <-  reduce_tree(prokarytree, 10239) #Virus


idx <- grep("\\bphylum\\b", prokarytree$rank); phylum_table = prokarytree[idx,]
phylum_top <- phylum_table[order(-(phylum_table$br_may),-(phylum_table$br_bel)),] #ShawnYou Need toChangeNeedDueToChanceofPolarityandcorrect
phylum_may <-  phylum_top[1:10,c(2,9)] 
phylum_bel <-  phylum_top[1:10,c(2,8)] 
location_may <- data.frame(location=c("Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks"))
location_bel <- data.frame(location=c("Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs"))
phylum_may <- cbind(phylum_may, location_may)
phylum_bel <- cbind(phylum_bel, location_bel)
colnames(phylum_may)[2]<- "value"
colnames(phylum_bel)[2]<- "value"
phy_plot <- rbind(phylum_bel, phylum_may)
colnames(phy_plot)[1]<- "Phylum" 
phychart <- ggplot(phy_plot, aes(fill=Phylum, y=value, x=location)) + 
    geom_bar(position="fill", colour = "black", stat="identity") + ylab("relative abundance (%)")
@
\subsection{Family Level}
<<>>= 
idx <- grep("\\bfamily\\b", prokarytree$rank); family_table = prokarytree[idx,]
family_top <- family_table[order(-(family_table$br_may),-(family_table$br_bel)),]
family_may <-  family_top[1:15,c(2,9)] 
family_bel <-  family_top[1:15,c(2,8)] 
location_may <- data.frame(location=c("Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks"))
location_bel <- data.frame(location=c("Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs"))
family_may <- cbind(family_may, location_may)
family_bel <- cbind(family_bel, location_bel)
colnames(family_may)[2]<- "value"
colnames(family_bel)[2]<- "value"
fam_plot <- rbind(family_bel, family_may)
colnames(fam_plot)[1]<- "Family" 
famchart <- ggplot(fam_plot, aes(fill=Family, y=value, x=location)) + 
    geom_bar(position="fill", colour ="black", stat="identity") + ylab("relative abundance (%)")
@
\subsection{Genus Level}
<<>>= 
idx <- grep("\\bgenus\\b$", prokarytree$rank); genus_table = prokarytree[idx,]
genus_top <- genus_table[order(-(genus_table$br_may),-(genus_table$br_bel)),]
genus_may <-  genus_top[1:20,c(2,9)] 
genus_bel <-  genus_top[1:20,c(2,8)] 
location_may <- data.frame(location=c("Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks","Maycocks"))
location_bel <- data.frame(location=c("Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs","Bellairs"))
genus_may <- cbind(genus_may, location_may)
genus_bel <- cbind(genus_bel, location_bel)
colnames(genus_may)[2]<- "value"
colnames(genus_bel)[2]<- "value"
gen_plot <- rbind(genus_bel, genus_may)
colnames(gen_plot)[1]<- "Genus" 
genchart <- ggplot(gen_plot, aes(fill=Genus, y=value, x=location)) + 
    geom_bar(position="fill", colour = "black", stat="identity") + ylab("relative abundance (%)")
@


\section{Principle Component Analysis Base on Relative abundance of each Taxonomic Level}
<<>>= 
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)



phylum_pca <- phylum_top[1:10,c(2,8:9)] 
colnames(phylum_pca) <- c("Phylum", "Bellairs", "Maycocks")
rownames(phylum_pca) <- phylum_pca$Phylum
P <- phylum_pca[,2:3]
rownames(P) <- rownames(phylum_pca)
P <- t(P)

genus_pca <- genus_top[1:15,c(2,8:9)]
colnames(genus_pca) <- c("Genus", "Bellairs", "Maycocks")
rownames(genus_pca) <- genus_pca$Genus
G <- genus_pca[,2:3]
rownames(G) <- rownames(genus_pca)
G <- t(G)


family_pca <- family_top[1:20,c(2,8:9)]
colnames(family_pca) <- c("Family", "Bellairs", "Maycocks")
rownames(family_pca) <- family_pca$Family
Fm <- family_pca[,2:3]
rownames(Fm) <- rownames(family_pca)
Fm <- t(Fm)




phy.pca <- prcomp(P, center = TRUE, scale. = TRUE)
fam.pca <- prcomp(Fm, center = TRUE, scale. = TRUE)
gen.pca <- prcomp(G, center = TRUE, scale. = TRUE)

summary(phy.pca)
summary(fam.pca)
summary(gen.pca)


str(phy.pca)
ggbiplot(phy.pca, labels=colnames(P))
ggbiplot(fam.pca, labels=rownames(P))
ggbiplot(gen.pca, labels=rownames(P))


@
\section{Kruskal-Wallis Test} 
<<>>=
phylum_KW <-phylum_top[1:10,c(2,8:9)] 
colnames(phylum_KW) <- c("Phylum", "Bellairs", "Maycocks")
phy_MKW <- kruskal.test(Phylum ~ Maycocks, data = phylum_KW) 
phy_BKW <- kruskal.test(Phylum ~ Bellairs, data = phylum_KW) 

genus_KW <- genus_top[1:15,c(2,8:9)]
colnames(genus_KW) <- c("Genus", "Bellairs", "Maycocks")
gen_MKW <- kruskal.test(Genus ~ Maycocks, data = genus_KW) 
gen_BKW <- kruskal.test(Genus ~ Bellairs, data = genus_KW) 

family_KW <- family_top[1:20,c(2,8:9)]
colnames(family_KW) <- c("Family", "Bellairs", "Maycocks")
fam_MKW <- kruskal.test(Family~ Maycocks, data = family_KW) 
fam_BKW <- kruskal.test(Family ~ Bellairs, data = family_KW) 


@
\section{Alpha Diversity Based on Relative abundance of each Taxonomic Level}
<<>>=
install.packages("permute")
install.packages("vegan", repos="http://R-Forge.R-project.org")
library(vegan)
@
\subsection{Rarefaction Species Richness}
<<>>=
# #rarefaction uses the smallest number of observations (individuals here) per sample to extrapolate the expected number if all other samples only had that number of observations


phy_raremax <- min(rowSums(P))
phy_quan <- quantile(rowSums(P))
fam_raremax <- min(rowSums(Fm))
gen_raremax <- min(rowSums(G))

Prare <- rarefy(P, phy_raremax)
reduce_P <- rarefy(P,5) #ReduceSampleSizePhylum
Frare <- rarefy(Fm,fam_raremax)
reduce_F <- rarefy(Fm,5) #ReduceSampleSizeFamily
Grare <- rarefy(G, gen_raremax)
reduce_G <- rarefy(G,5) #ReduceSampleSizeGenus
P.abund <- rowSums(P)

par(mfrow = c(1, 2))
plot(P.abund, Prare, xlab = "Observed No. of Species", ylab = "Rarefied No. of Species")
rarecurve(P, col = "blue")

@
\subsection{Diversity indices Shannon & Simpson; Pielou's evenness}
<<>>=
phy_shann <- diversity(P)
phy_simp <- diversity(P, "simpson")
fam_shann <- diversity(Fm)
fam_simp <- diversity(Fm, "simpson")
gen_shann <- diversity(G)
gen_simp <- diversity(G, "simpson")
par(mfrow = c(1, 3))
hist(phy_shann, main="Histogram for Shannon Index (Phylum)", col = "dark green")
hist(fam_shann, main="Histogram for Shannon Index (Family)", col = "blue")
hist(gen_shann, main="Histogram for Shannon Index (Genus)", col = " red")
 #Fisher's log-series 
phy_alpha <- fisher.alpha(p)
fam_alpha <- fisher.alpha(Fm)
gen_alpha <- fisher.alpha(G)
@

\section{Functional Comparision looking at the COGs(Cluster of Orthologous Groups) Generated from Assemblies in JGI}


Total of 4575 COG Clusters - Bellairs (98.79 percent of Assembly)
Total of 4321 COG Clusters - Maycocks (93.31 percent of Assembly)
<<>>=
#Load CSV for Bellairs & Maycocks
COG_bell <- read.csv("~/repo/reefmicrobiome/data/Bellairs_COGs.csv")
COG_may <- read.csv("~/repo/reefmicrobiome/data/Maycocks_COGs.csv")
colnames(COG_may)[3] <- "Maycocks"
TopCOG_may <- COG_may


colnames(COG_bell)[3] <- "Bellairs"
TopCOG_bell <- COG_bell

@
The highest COG Cluster at Maycocks was Nucleoside-diphosphate-sugar epimerase(COG0451) with 9722 gene counts.This seems to be possibly linked to the abundance of Prochlorococcus marinus(gene wcaG) (https://www.uniprot.org/uniprot/A8G652). Function : Cell Wall/membrane/envelope biogenesis (https://www.ncbi.nlm.nih.gov/Structure/cdd/cddsrv.cgi?uid=223528).

The higest COG Cluster at Bellairs was NAD(P)-dependent dehydrogenase, short-chain alcohol dehydrogenase family(COG1028) with 9792 gene counts.

Merging both dataframes together and taking the Top 50 COGs sorting by Bellairs then Maycocks producing a heatmap.
<<>>=
TopCOG_may <-TopCOG_may[,c(-2)] #removing COD.Name
COG_counts <- merge(TopCOG_bell, TopCOG_may, by.x = "COG.ID", by.y = "COG.ID")


TOPCOGS <- COG_counts[order(-(COG_counts$Bellairs),-(COG_counts$Maycocks)),]

subset_cogs <- TOPCOGS[1:50,] #subset Top 50

@
Heat Map
<<>>=
subset_br<- subset_cogs[,c(2:3)]
subset_my <-subset_cogs[,c(2,4)]
colnames(subset_my) <- c( "Name", "Gene.Count")
colnames(subset_br) <- c( "Name", "Gene.Count")
subset_my$Location <- "Maycocks"
subset_br$Location <- "Bellairs"
htm_cog <- rbind(subset_my,subset_br)

library(viridis) 
library(scales)
library(ggplot2)
library(hrbrthemes)
library(ggplot2)
library(dplyr)
heatmp <- ggplot(htm_cog, aes(Location, Name, fill= Gene.Count)) + 
  geom_tile() +
  scale_fill_viridis(discrete=FALSE) 

  




@


\end{document}